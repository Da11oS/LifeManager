<#@ template language="C#" debug="True" hostSpecific="True" #>
<#@ output extension=".generated.cs"                        #>

<#@ include file="$(LinqToDBT4PostgreSQLTemplatesPath)LinqToDB.PostgreSQL.Tools.ttinclude" once="true" #>
<#@ include file="$(LinqToDBT4PostgreSQLTemplatesPath)PluralizationService.ttinclude"      once="true" #>
<#
NamespaceName            = "LM.Data";       // Namespace of the generated classes.

	DataContextName          = "DbContext";      // DataContext class name. If null - database name + "DB".
	BaseDataContextClass     = "LinqToDB.Data.DataConnection";               // Base DataContext class name. If null - LinqToDB.Data.DataConnection.
	GenerateConstructors     = false;               // Enforce generating DataContext constructors.
	DefaultConfiguration     = "Default";               // Defines default configuration for default DataContext constructor.

	BaseEntityClass          = null;               // Base Entity class name. If null - none.
	DatabaseName             = null;               // Table database name - [Table(Database="DatabaseName")].
	GenerateDatabaseName     = false;              // Always generate table database name, even though DatabaseName is null.
	IncludeDefaultSchema     = true;               // Default schema name is generated - [Table(Database="Northwind", Schema="dbo", Name="Customers")]
	OneToManyAssociationType = "IEnumerable<{0}>"; // One To Many association type. Change it to "List<{0}>" if needed.
	GenerateAssociations     = true;               // Enforce generating associations.
	GenerateBackReferences   = false;               // Enforce generating backreference associations.

	ReplaceSimilarTables     = true;               // Replaces stored procedure result class names with similar to existing table class names.
	GenerateFindExtensions   = true;               // Generates find extension methods based on PKs information.
	IsCompactColumns         = false;               // If true, column compact view.

	PluralizeClassNames                 = false;   // If true, pluralizes table class names.
	SingularizeClassNames               = false;   // If true, singularizes table class names.
	SingularizeClassNames               = false;   // If true, singularizes table class names.
	PluralizeDataContextPropertyNames   = false;   // If true, pluralizes DataContext property names.
	SingularizeDataContextPropertyNames = false;   // If true, singularizes DataContex pProperty names.

	GenerateDataTypes                   = true;    // If true, generates the DataType/Length/Precision/Scale properties of the Column attribute (unless overriden by the properties below).
	//GenerateDataTypeProperty          = true;    // If true, generates the DataType property of the Column attribute. If false, excludes generation on the DataType property even if GenerateDataTypes == true.
	GenerateLengthProperty              = true;    // If true, generates the Length property of the Column attribute. If false, excludes generation on the Length property even if GenerateDataTypes == true.
	GeneratePrecisionProperty           = true;    // If true, generates the Precision property of the Column attribute. If false, excludes generation on the Precision property even if GenerateDataTypes == true.
	GenerateScaleProperty               = true;    // If true, generates the Scale property of the Column attribute. If false, excludes generation on the Scale property even if GenerateDataTypes == true.
	GenerateDbTypes                     = true;    // If true, generates the DbType property of the Column attribute.

	GenerateObsoleteAttributeForAliases = false;   // If true, generates [Obsolete] attribute for aliases.
	IsCompactColumnAliases              = false;    // If true, column alias compact view.

	NormalizeNames                      = false;    // convert some_name to SomeName for types and members

	LoadPostgreSQLMetadata("localhost", "5432", "life_manager", "postgres", "postgres");

	GenerateModel();
#>
